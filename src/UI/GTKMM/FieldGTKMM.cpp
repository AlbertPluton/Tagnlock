//
//	Author: A.L. Hertog
//	Date: 30 January 2009
//	License: GPL
//
//

#include "FieldGTKMM.h"

#include "Field.h"
#include "TextField.h"
#include "CheckField.h"
#include "ComboField.h"
#include "SpinField.h"

#include "TextFieldGTKMM.h"
#include "CheckFieldGTKMM.h"
#include "ComboFieldGTKMM.h"
#include "SpinFieldGTKMM.h"


#include <string>
using namespace std;

#include <iostream>


//-----------------------------------------------------------------------------


Gtk::AttachOptions FieldGTKMM::tableAttachX = defaultTableAttachX;
Gtk::AttachOptions FieldGTKMM::tableAttachY = defaultTableAttachY;
		
int FieldGTKMM::columns = defaultColumns; 
int FieldGTKMM::tablePaddingX = defaultPaddingX;
int FieldGTKMM::tablePaddinY = defaultPaddingY;
		
		
//-----------------------------------------------------------------------------

FieldGTKMM::FieldGTKMM( Field* pField, FieldData* pData, int i )
{

#ifdef DEBUG_MESSAGES_DEF
	cout << "Constructing FieldGTKMM	object.\n";
#endif
	
	tableAttachX = Gtk::FILL|Gtk::EXPAND;
	tableAttachY = Gtk::EXPAND;

	baseField = pField;
	data = pData;
	index = i;
	
	editWidget = NULL;


	// Set properties of basic widgets
	label.set_text( baseField->getLabel() );
	required.set_active( baseField->getRequired() );
	reset.set_active( baseField->getReset() );

	
	// Add the HBox to the EventBox as a child.
	this->add(hBox);
	
	// Add the table to the hBox.
	hBox.add(table);
	
	// Add the widgets to the table
	table.attach( label, 0 , 3, 0, 1, tableAttachX, tableAttachY, tablePaddingX, tablePaddinY	);
	table.attach( required, columns-2 , columns-1, 0, 1, tableAttachX, tableAttachY, tablePaddingX, tablePaddinY	);
	table.attach( reset, columns-1 , columns, 0, 1, tableAttachX, tableAttachY, tablePaddingX, tablePaddinY	);

	
	
	// Connect the signal of the EventBox
	this->signal_button_press_event().connect( sigc::mem_fun( *this, &FieldGTKMM::selected) );

	this->show_all();

};

//-----------------------------------------------------------------------------

FieldGTKMM::~FieldGTKMM()
{

#ifdef DEBUG_MESSAGES_DEF	
	cout << "Destroyed a FieldGTKMM object.\n";
#endif

};

//-----------------------------------------------------------------------------

FieldGTKMM* FieldGTKMM::newFieldGTKMM( Field* pField )
{
	return newFieldGTKMM( pField, NULL, -1 );
};

//-----------------------------------------------------------------------------

FieldGTKMM* FieldGTKMM::newFieldGTKMM( Field* pField, FieldData* pData )
{
	return newFieldGTKMM( pField, pData, -1 );
};

//-----------------------------------------------------------------------------

FieldGTKMM* FieldGTKMM::newFieldGTKMM( Field* pField, FieldData* pData, int i )
{

	FieldGTKMM* fieldGTKMM = NULL;

	string fieldType = pField->getType();


	try
	{
		if( fieldType.compare("TextField") == 0 )	//-------------------------------
		{
			fieldGTKMM = new TextFieldGTKMM( pField, pData, i );
		}
		else if( fieldType.compare("CheckField") == 0 )	//-------------------------------
		{
			fieldGTKMM = new CheckFieldGTKMM( pField, pData, i );
		}
		else if( fieldType.compare("SpinField") == 0 )	//---------------------------
		{
			fieldGTKMM = new SpinFieldGTKMM( pField, pData, i );
		}
		else if( (fieldType.compare("Combo") == 0) ||  (fieldType.compare("ComboEntry") == 0) || (fieldType.compare("ComboRadio") == 0 ) )	//-------------------------------
		{
			fieldGTKMM = new ComboFieldGTKMM( pField, pData, i );
		}
		else
		{
#ifdef TODO_DEF
#warning TODO in FieldGTKMM::newFieldGTKMM: throw error
#endif				// TODO Send error because the field type is unknown.
		}
	}
#ifdef TODO_DEF
#warning TODO in FieldGTKMM::newFieldGTKMM: chatch errors shuch as the one generated above or out of memory generated by new.
#endif		
	catch( exception& e )
	{
		throw e;
	}	

	return fieldGTKMM;
	
};

//-----------------------------------------------------------------------------

Field* FieldGTKMM::getBaseField()
{
	return baseField;
};
	

//-----------------------------------------------------------------------------

void FieldGTKMM::setFieldData( FieldData* pData )
{
	data = pData;
}; 

//-----------------------------------------------------------------------------

void FieldGTKMM::setIndex( int i )
{
	index = i;
};

//-----------------------------------------------------------------------------

int FieldGTKMM::getIndex( )
{
	return index;
};

//-----------------------------------------------------------------------------

void FieldGTKMM::setColumns( int c  )
{
	columns = c;
};

//-----------------------------------------------------------------------------

int FieldGTKMM::getColumns()
{
	return columns;
};

//-----------------------------------------------------------------------------

Gtk::Widget* FieldGTKMM::getLabel()
{
	return &label;
};


//-----------------------------------------------------------------------------

Gtk::Widget* FieldGTKMM::getRequired()
{
	return &required;
};


//-----------------------------------------------------------------------------

Gtk::Widget* FieldGTKMM::getReset()
{
	return &reset;
};

//-----------------------------------------------------------------------------

bool FieldGTKMM::selected( GdkEventButton* event )
{
	signal_selected.emit( this->getBaseField(), this->getIndex() );	
	return true;
};

//-----------------------------------------------------------------------------


void FieldGTKMM::changed( )
{
	signal_changed.emit( this->getBaseField(), this->getIndex() );	
};

//-----------------------------------------------------------------------------

FieldGTKMM::type_signal_selected FieldGTKMM::get_signal_selected( void )
{
	return signal_selected;
};

//-----------------------------------------------------------------------------

FieldGTKMM::type_signal_changed FieldGTKMM::get_signal_changed( void )
{
	return signal_changed;
};

//-----------------------------------------------------------------------------

void FieldGTKMM::updatePropertiesParentClass()
{
	label.set_text( baseField->getLabel() );
	required.set_active( baseField->getRequired() );
	reset.set_active( baseField->getReset() );
};
		
		

//-----------------------------------------------------------------------------



//-----------------------------------------------------------------------------
		
		
		

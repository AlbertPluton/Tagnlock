//
//	Author: A.L. Hertog
//	Date: 13 May 2009
//	License: GPL
//
//

#ifndef FIELDEDITWIDGETGTKMM_H
#define FIELDEDITWIDGETGTKMM_H



#include "Category.h"
#include "Field.h"
#include "YesNoToggleButtonGTKMM.h"


#include <gtkmm.h>

#include <iostream>
#include <string>
using namespace std;

#include <sigc++/sigc++.h>

//! This class represents a window in which field properties can be edited.
/*!
		The class is derived from Gtk::Table to house the different widgets representing the properties of the field. 
*/

class FieldEditWidgetGTKMM : public Gtk::Table
{

	public:
		
		//! The default constructor.
		/*!
			This constructor generates a normal FieldEditWindowGTKMM object. To generate a object depending on the field type of pField use the static function FieldEditWindowGTKMM* FieldEditWindowGTKMM::newEditWindow( Field* pField ). This function is also able to generate a FieldSpinEditWindowGTKMM or FieldComboEditWindowGTKMM depending on the type.		
		*/
		FieldEditWidgetGTKMM( Field* pField, int i );
		
		//! The default destructor.
		~FieldEditWidgetGTKMM();
		
		//! Function to create a new FieldEditWindowGTKMM object.
		/*!
			This function takes the type from pField and determinse from this what type of object to generate. This can be a: FieldEditWindowGTKMM, FieldSpinEditWindowGTKMM or FieldComboEditWindowGTKMM.
		*/
		static FieldEditWidgetGTKMM* newEditWidget( Field* pField, int i );


		// Used to change the index after a field rearangement.
		void setIndex( int i );
		
		
		
		// The signal to indicate a change in the configuration of this field.
		typedef sigc::signal<void, int> type_signal_changed_property;
		type_signal_changed_property signal_changed_property();

 
	private:

		Gtk::Label typeLabel, labelLabel, requiredLabel, resetLabel;
		
		Gtk::Label type;
		Gtk::Entry label;
		YesNoToggleButtonGTKMM required;
		YesNoToggleButtonGTKMM reset;
		
		// Funcitons to handle signals generated by buttons
		void changeLabel();
		void changeRequired();
		void changeReset();


	protected:
	
		Gtk::AttachOptions attachX;
		Gtk::AttachOptions attachY;

		int rows, columns;

		// Pointer to the field this widget was generated for.
		Field* baseField;
		int index;

		// The signal to indicate a change in the configuration of this field.
	 	type_signal_changed_property m_signal_changed_property;

	


};






#endif










